name: Publish to PyPI

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: read
  id-token: write

jobs:
  build-and-publish:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: pip

      - name: Check tag equals pyproject.toml version
        id: ver
        shell: bash
        run: |
          TAG="${GITHUB_REF#refs/tags/v}"
          VERSION=$(python -c "import tomllib, pathlib, sys; print(tomllib.loads(pathlib.Path('pyproject.toml').read_text())['project']['version'])")
          echo "tag=$TAG" >> "$GITHUB_OUTPUT"
          echo "version=$VERSION" >> "$GITHUB_OUTPUT"
          if [ "$TAG" != "$VERSION" ]; then
            echo "::error::Git tag ($TAG) does not match version in pyproject.toml ($VERSION)"
            exit 1
          fi

      - name: Remove old build artefacts
        run: rm -rf build dist *.egg-info

      - name: Build distributions
        run: |
          python -m pip install --upgrade build
          python -m build --wheel --sdist --outdir dist

      - name: Twine check
        run: |
          python -m pip install --upgrade twine
          twine check dist/*

      - name: Publish package
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          user: __token__
          password: ${{ endsWith(steps.ver.outputs.tag, '-rc') && secrets.TEST_PYPI_API_TOKEN || secrets.PYPI_API_TOKEN }}
          repository_url: ${{ endsWith(steps.ver.outputs.tag, '-rc') && 'https://test.pypi.org/legacy/' || 'https://upload.pypi.org/legacy/' }}
          skip_existing: false
